name: Test Github Packages

on:
  pull_request:
    branches: [ master ]

jobs:

  prepare:
    name: Prepare Image
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v2
      - run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils        
          APP_ARTIFACTID=`xmllint --xpath '/*[local-name()="project"]/*[local-name()="artifactId"]/text()' ./app/pom.xml`
          APP_VERSION=`xmllint --xpath '/*[local-name()="project"]/*[local-name()="version"]/text()' ./app/pom.xml`
          echo "export APP_ARTIFACTID=$APP_ARTIFACTID" > ./VARIABLES_FILE
          echo "export APP_VERSION=$APP_VERSION" >> ./VARIABLES_FILE
          cat ./VARIABLES_FILE
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: VARIABLES_FILE
          path: ./VARIABLES_FILE

  build:
    name: Build Image
    runs-on: ubuntu-latest
    needs: ["prepare"]
    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v3
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: VARIABLES_FILEls
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.USER }}
          password: ${{ secrets.GH_TOKEN }}
      - run: |
          source ./VARIABLES_FILE
          echo $APP_ARTIFACTID
          echo $APP_VERSION
          docker build . -t ghcr.io/${{ github.USER }}/${{ secrets.image }}:latest --build-arg "APP_ARTIFACTID=$APP_ARTIFACTID" --build-arg "APP_VERSION=$APP_VERSION"
          docker save ghcr.io/${{ secrets.USER }}/${{ secrets.IMAGE }}:test > ./docker-image.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: ./docker-image.tar
          retention-days: 1

  test:
    name: Test Image
    runs-on: ubuntu-20.04
    needs: ["build", "prepare"]
    steps:
      - name: Download built docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .artifact
      - name: Prepare image to run
        working-directory: .artifact
        run: docker load < docker-image.tar
      - name: Check Out Repo 
        uses: actions/checkout@v3
      - name: Try to run (github.com)
        run: docker-compose -f .github/docker-compose-test.yml up -d
      - name: Install curl
        run: |
          sudo apt install curl -y
      - name: Should exit with code 1
        run: |
          sleep 10
          docker logs shadowsocks_test 2>&1 | grep "Started MyWebApplication"
